ACTION_CLEAR_ARRAY RACE_TXT
ACTION_CLEAR_ARRAY CLAS_TXT
ACTION_DEFINE_ASSOCIATIVE_ARRAY RACE_TXT BEGIN ~RACETEXT~ => ~~ END
ACTION_DEFINE_ASSOCIATIVE_ARRAY CLAS_TXT BEGIN ~CLASTEXT~ => ~~ END
ACTION_DEFINE_ASSOCIATIVE_ARRAY REPU_TXT BEGIN ~REPUTATI~ => ~~ END
ACTION_IF FILE_EXISTS_IN_GAME ~CAMPAIGN.2da~ BEGIN
	COPY_EXISTING ~CAMPAIGN.2DA~ ~override~
		COUNT_2DA_ROWS 32 rows
		FOR ( i = 0 ; i < rows ; ++i ) BEGIN
			READ_2DA_ENTRY i 30 32 file
			TO_UPPER file
			PATCH_IF !VARIABLE_IS_SET $CLAS_TXT(~%file%~) BEGIN
				DEFINE_ASSOCIATIVE_ARRAY CLAS_TXT BEGIN ~%file%~ => ~~ END
			END
			READ_2DA_ENTRY i 31 32 file
			TO_UPPER file
			PATCH_IF !VARIABLE_IS_SET $RACE_TXT(~%file%~) BEGIN
				DEFINE_ASSOCIATIVE_ARRAY RACE_TXT BEGIN ~%file%~ => ~~ END
			END
			READ_2DA_ENTRY i 29 32 file
			TO_UPPER file
			PATCH_IF !VARIABLE_IS_SET $RACE_TXT(~%file%~) BEGIN
				DEFINE_ASSOCIATIVE_ARRAY REPU_TXT BEGIN ~%file%~ => ~~ END
			END
		END
		BUT_ONLY_IF_IT_CHANGES
END

OUTER_SET stra = RESOLVE_STR_REF(@9000) //bear
OUTER_SET strb = RESOLVE_STR_REF(@9001) //bear
OUTER_SET bear = RESOLVE_STR_REF(@9002) //bear
OUTER_SET vamp = RESOLVE_STR_REF(@9003) //vampire
OUTER_SET tief = RESOLVE_STR_REF(@9004) //tiefling
OUTER_SET gobl = RESOLVE_STR_REF(@9005) //goblin
OUTER_SET aasi = RESOLVE_STR_REF(@9006) //aasimar
ACTION_DEFINE_ASSOCIATIVE_ARRAY race_desc BEGIN
	~VAMPIRE~  => ~%vamp%~
	~TIEFLING~ => ~%tief%~
	~GOBLIN~   => ~%gobl%~
	~AASIMAR~  => ~%aasi%~
	~BEAR~     => ~%bear%~
END
OUTER_SET minus = 0 - 1
ACTION_PHP_EACH RACE_TXT AS file => ~~ BEGIN
	ACTION_IF FILE_EXISTS_IN_GAME ~%file%.2da~ BEGIN
		APPEND ~%file%.2da~ ~BEAR 103 %stra% -1 %strb% -1~ UNLESS ~BEAR~
		COPY_EXISTING ~%file%.2da~ ~override~ PRETTY_PRINT_2DA
	END
END

/* str bonus */
OUTER_SPRINT ~str_bonus_2da~ ~StrBonusList = {
	StrBonus = {
	strbonust
	},
	StrExtBonus = {
	strexbonust
	}
}~
COPY_EXISTING ~strmod.2da~ ~override~
	COUNT_2DA_ROWS 5 rws
	PATCH_IF ( rws > 0 ) BEGIN
		FOR ( i = 0 ; i < rws ; ++i ) BEGIN
			READ_2DA_ENTRY i 0 5 str
			READ_2DA_ENTRY i 1 5 to_hit
			READ_2DA_ENTRY i 2 5 dmg
			READ_2DA_ENTRY i 3 5 bblg
			READ_2DA_ENTRY i 4 5 weight
			SPRINT ~tapa~ ~['Str%str%'] = {%to_hit%, %dmg%, %bblg%, %weight%},~
			INNER_PATCH_SAVE ~str_bonus_2da~ ~%str_bonus_2da%~ BEGIN
				REPLACE_TEXTUALLY ~strbonust~ ~%TAB%%tapa%%LNL%%TAB%strbonust~
			END
		END
	END
	BUT_ONLY_IF_IT_CHANGES
COPY_EXISTING ~strmodex.2da~ ~override~
	COUNT_2DA_ROWS 5 rws
	PATCH_IF ( rws > 0 ) BEGIN
		FOR ( i = 0 ; i < rws ; ++i ) BEGIN
			READ_2DA_ENTRY i 0 5 str
			READ_2DA_ENTRY i 1 5 to_hit
			READ_2DA_ENTRY i 2 5 dmg
			READ_2DA_ENTRY i 3 5 bblg
			READ_2DA_ENTRY i 4 5 weight
			SPRINT ~tapa~ ~['StrEx%str%'] = {%to_hit%, %dmg%, %bblg%, %weight%},~
			INNER_PATCH_SAVE ~str_bonus_2da~ ~%str_bonus_2da%~ BEGIN
				REPLACE_TEXTUALLY ~strexbonust~ ~%TAB%%tapa%%LNL%%TAB%strexbonust~
			END
		END
	END
	BUT_ONLY_IF_IT_CHANGES
OUTER_INNER_PATCH_SAVE ~str_bonus_2da~ ~%str_bonus_2da%~ BEGIN
	REPLACE_TEXTUALLY ~strbonust%LNL%%TAB%~ ~~
	REPLACE_TEXTUALLY ~strexbonust%LNL%%TAB%~ ~~
END

/* xplevel */
OUTER_SPRINT ~xplevel_2da~ ~~
COPY_EXISTING ~xplevel.2da~ ~override~
	COUNT_2DA_COLS cols
	COUNT_2DA_ROWS 5 rws
	SET rws = rws - 1
	COUNT_2DA_ROWS cols rows
	WHILE rows < rws BEGIN
		cols = cols - 1
		COUNT_2DA_ROWS cols rows
	END
	SET maxlvl = cols - 1
	SPRINT ~tablename~ ~~
	FOR ( i = 0 ; i < rows ; ++i ) BEGIN
		SET done = 0
		FOR ( j = 0 ; j < cols ; ++j ) BEGIN
			READ_2DA_ENTRY i j cols value
			PATCH_IF ( j = 0 ) BEGIN
				PATCH_MATCH ~%value%~ WITH
					~MAGE~     BEGIN SPRINT ~tablename~ ~mageXPList~     SET done = 1 END
					~FIGHTER~  BEGIN SPRINT ~tablename~ ~fighterXPList~  SET done = 1 END
					~PALADIN~  BEGIN SPRINT ~tablename~ ~paladinXPList~  SET done = 1 END
					~RANGER~   BEGIN SPRINT ~tablename~ ~rangerXPList~   SET done = 1 END
					~CLERIC~   BEGIN SPRINT ~tablename~ ~clericXPList~   SET done = 1 END
					~DRUID~    BEGIN SPRINT ~tablename~ ~druidXPList~    SET done = 1 END
					~THIEF~    BEGIN SPRINT ~tablename~ ~thiefXPList~    SET done = 1 END
					~BARD~     BEGIN SPRINT ~tablename~ ~bardXPList~     SET done = 1 END
					~SORCERER~ BEGIN SPRINT ~tablename~ ~sorcererXPList~ SET done = 1 END
					~MONK~     BEGIN SPRINT ~tablename~ ~monkXPList~     SET done = 1 END
					~SHAMAN~   BEGIN SPRINT ~tablename~ ~shamanXPList~   SET done = 1 END
				DEFAULT
					SPRINT ~tablename~ ~~
				END
				PATCH_IF ( i = 0 ) BEGIN SPRINT nl ~~ END ELSE BEGIN SPRINT nl ~%LNL%%LNL%~ END
				SPRINT ~xplevel_2da~ ~%xplevel_2da%%nl%%tablename% = {}~
			END ELSE BEGIN
				PATCH_IF ( done = 1 ) BEGIN
					SPRINT ~xplevel_2da~ ~%xplevel_2da%%LNL%table.insert(%tablename%, {%j%, %value%, %maxlvl%})~
				END
			END
		END
	END
	BUT_ONLY_IF_IT_CHANGES


ACTION_CLEAR_ARRAY CLASTEXT_ARRAY
ACTION_CLEAR_ARRAY CLASTEXT_ARRAY_CHECK
ACTION_CLEAR_ARRAY CLASDATA_TABLES
ACTION_CLEAR_ARRAY CLASDATA_TABLES_EX
/* Class data */
ACTION_DEFINE_ASSOCIATIVE_ARRAY class_letter BEGIN
	~BARD~     => ~B~
	~CLERIC~   => ~C~
	~DRUID~    => ~D~
	~FIGHTER~  => ~F~
	~MAGE~     => ~M~
	~MONK~     => ~MN~
	~PALADIN~  => ~P~
	~RANGER~   => ~R~
	~SORCERER~ => ~S~
	~SHAMAN~   => ~SH~
	~THIEF~    => ~T~
END
ACTION_DEFINE_ASSOCIATIVE_ARRAY race_letter BEGIN
	~DWARF~    => ~D~
	~ELF~      => ~E~
	~GNOME~    => ~G~
	~HUMAN~    => ~H~
	~HALF_ELF~ => ~HE~
	~HALFLING~ => ~HL~
	~HALFORC~  => ~HO~
END
ACTION_CLEAR_ARRAY KIT_EXISTS
SILENT
ACTION_PHP_EACH class_letter AS _ => cls BEGIN
	ACTION_PHP_EACH race_letter AS _ => rac BEGIN
		ACTION_IF FILE_EXISTS_IN_GAME ~K_%cls%_%rac%.2da~ BEGIN
			COPY_EXISTING ~K_%cls%_%rac%.2da~ ~override~
				COUNT_2DA_ROWS 2 rws
				FOR ( i = 0 ; i < rws ; ++i ) BEGIN
					READ_2DA_ENTRY i 1 2 kts
					PATCH_IF ( IS_AN_INT ~%kts%~ ) BEGIN
						PATCH_IF kts = 0 BEGIN SET kts = 16384 END
						PATCH_IF ( NOT VARIABLE_IS_SET $KIT_EXISTS(~kts_%kts%~) ) BEGIN
							SET $KIT_EXISTS(~kts_%kts%~) = 1
						END
					END
				END
				BUT_ONLY_IF_IT_CHANGES
		END
	END
END
VERBOSE
OUTER_SPRINT ~class_dual_2da~ ~~
/* CLASTEXT */
<<<<<<<< ffff.2da
2DA                  V1.0
-1
	CLASSID	KITID	LOWER	DESCSTR	MIXED	BIOGRAPHY	FALLEN
>>>>>>>>
COPY ~ffff.2da~ ~%MOD_FOLDER%/CLASTEXT.2da~
OUTER_SPRINT ~clastext_2da~ ~clastxtList = {}~
ACTION_PHP_EACH CLAS_TXT AS file => _ BEGIN
	ACTION_IF FILE_EXISTS_IN_GAME ~%file%.2da~ BEGIN
		COPY_EXISTING ~%file%.2da~ ~override~
			COUNT_2DA_ROWS 8 rows
			FOR ( i = 0 ; i < rows ; ++i ) BEGIN
				READ_2DA_ENTRY i 0 8 class
				TO_UPPER class
				PATCH_IF ( ~%class%~ STR_CMP ~CLASSID~ ) BEGIN
					READ_2DA_ENTRY i 1 8 classid
					READ_2DA_ENTRY i 2 8 kitid
					READ_2DA_ENTRY i 3 8 lower
					READ_2DA_ENTRY i 4 8 desc
					READ_2DA_ENTRY i 5 8 mixed
					READ_2DA_ENTRY i 7 8 fallen
					PATCH_IF NOT VARIABLE_IS_SET $CLASTEXT_ARRAY_CHECK(~%class%~) BEGIN
						DEFINE_ASSOCIATIVE_ARRAY CLASTEXT_ARRAY_CHECK BEGIN ~%class%~ => _ END
						DEFINE_ASSOCIATIVE_ARRAY CLASTEXT_ARRAY BEGIN
							~%mixed%~, ~%lower%~, ~%desc%~, ~%fallen%~, ~%classid%~, ~%kitid%~ => ~%class%~
						END
					END
					PATCH_IF ( ~%kitid%~ STR_EQ         ~64~ ) BEGIN SPRINT kitid ~22~ END
					PATCH_IF ( ~%kitid%~ STR_EQ        ~128~ ) BEGIN SPRINT kitid ~23~ END
					PATCH_IF ( ~%kitid%~ STR_EQ        ~256~ ) BEGIN SPRINT kitid ~24~ END
					PATCH_IF ( ~%kitid%~ STR_EQ        ~512~ ) BEGIN SPRINT kitid ~25~ END
					PATCH_IF ( ~%kitid%~ STR_EQ       ~1024~ ) BEGIN SPRINT kitid ~26~ END
					PATCH_IF ( ~%kitid%~ STR_EQ       ~2048~ ) BEGIN SPRINT kitid ~27~ END
					PATCH_IF ( ~%kitid%~ STR_EQ       ~4096~ ) BEGIN SPRINT kitid ~28~ END
					PATCH_IF ( ~%kitid%~ STR_EQ       ~8192~ ) BEGIN SPRINT kitid ~29~ END
					PATCH_IF ( ~%kitid%~ STR_EQ ~2147483648~ ) BEGIN SPRINT kitid ~30~ END
					PATCH_IF ( ~%kitid%~ STR_EQ ~1073741824~ ) BEGIN SPRINT kitid ~31~ END
					PATCH_IF NOT VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) AND ( fallen = 0 ) BEGIN
						SET kitaccess = 1
						PATCH_IF ( NOT VARIABLE_IS_SET $KIT_EXISTS(~kts_%kitid%~) ) BEGIN
							SET kitaccess = 0
						END
						SPRINT $CLASDATA_TABLES_EX(~kitlist_%kitid%~) ~%class%~
						DEFINE_ASSOCIATIVE_ARRAY CLASDATA_TABLES BEGIN
							~%class%~ => ~{%LNL%%TAB%%TAB%kitaccess = %kitaccess%, kitid = %kitid%,~
						END
					END
					INNER_ACTION BEGIN
						COPY ~%MOD_FOLDER%/CLASTEXT.2da~  ~%MOD_FOLDER%/CLASTEXT.2da~
							COUNT_2DA_ROWS 8 rw
							INSERT_2DA_ROW rw 8 ~%class%	%classid%	%kitid%	%lower%	%desc%	%mixed%	-1	%fallen%~
							PRETTY_PRINT_2DA
					END
				END
			END
			BUT_ONLY_IF_IT_CHANGES
	END
END
ACTION_CLEAR_ARRAY KITLIST_TABLE
ACTION_CLEAR_ARRAY KITLIST_TABLE_EX
COPY_EXISTING ~KITLIST.2da~  ~override~
	COUNT_2DA_ROWS 9 rws
	FOR ( i = 0 ; i < rws ; ++i ) BEGIN
		READ_2DA_ENTRY i 0 9 id
		PATCH_IF ( IS_AN_INT id ) AND ( id > 0 ) BEGIN
			READ_2DA_ENTRY i 1 9 name
			PATCH_IF ( NOT VARIABLE_IS_SET $KITLIST_TABLE(~kitlist_%id%~) ) BEGIN
				SPRINT $KITLIST_TABLE(~kitlist_%id%~) ~%name%~
			END
			PATCH_IF NOT VARIABLE_IS_SET $CLASDATA_TABLES(~%name%~) BEGIN
				SET done = 0
				PATCH_IF ( VARIABLE_IS_SET $CLASDATA_TABLES_EX(~kitlist_%id%~) ) BEGIN
					SPRINT txtkit $CLASDATA_TABLES_EX(~kitlist_%id%~)
					SPRINT $KITLIST_TABLE_EX(~%name%~) ~%txtkit%~
					SET done = 1
				END
				PATCH_IF NOT done BEGIN
					READ_2DA_ENTRY i 2 9 lower
					READ_2DA_ENTRY i 3 9 mixed
					READ_2DA_ENTRY i 4 9 desc
					SET fallen = 0
					READ_2DA_ENTRY i 8 9 classid
					DEFINE_ASSOCIATIVE_ARRAY CLASTEXT_ARRAY BEGIN
						~%mixed%~, ~%lower%~, ~%desc%~, ~%fallen%~, ~%classid%~, ~%id%~ => ~%name%~
					END
					DEFINE_ASSOCIATIVE_ARRAY CLASDATA_TABLES BEGIN
						~%name%~ => ~{%LNL%%TAB%%TAB%kitaccess = 0, kitid = %id%,~
					END
					SET done = 1
				END
			END
		END
	END
	BUT_ONLY_IF_IT_CHANGES
COPY_EXISTING ~CLSRCREQ.2da~ ~override~
	COUNT_2DA_ROWS 8 rws
	FOR ( i = 0 ; i < rws ; ++i ) BEGIN
		READ_2DA_ENTRY i 0 8 class
		SET done = 0
		PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
			SET done = 1
		END
		PATCH_IF NOT done BEGIN
			PATCH_IF VARIABLE_IS_SET $KITLIST_TABLE_EX(~%class%~) BEGIN
				SPRINT class $KITLIST_TABLE_EX(~%class%~)
				PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
					SET done = 1
				END
			END
		END
		PATCH_IF done BEGIN
			READ_2DA_ENTRY i 1 8 data_1
			READ_2DA_ENTRY i 2 8 data_2
			READ_2DA_ENTRY i 3 8 data_3
			READ_2DA_ENTRY i 4 8 data_4
			READ_2DA_ENTRY i 5 8 data_5
			READ_2DA_ENTRY i 6 8 data_6
			READ_2DA_ENTRY i 7 8 data_7
			SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
			SPRINT data_restrict ~%data_restrict%%LNL%%TAB%%TAB%racerestrict = { ['HUMAN']=%data_1%, ['ELF']=%data_2%, ['HALF_ELF']=%data_3%, ['DWARF']=%data_4%, ['HALFLING']=%data_5%, ['GNOME']=%data_6%, ['HALFORC']=%data_7% },~
			SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
		END
	END
	BUT_ONLY_IF_IT_CHANGES
COPY_EXISTING ~ABDCDSRQ.2da~ ~override~
	COUNT_2DA_ROWS 7 rws
	FOR ( i = 0 ; i < rws ; ++i ) BEGIN
		READ_2DA_ENTRY i 0 7 class
		SET done = 0
		PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
			SET done = 1
		END
		PATCH_IF NOT done BEGIN
			PATCH_IF VARIABLE_IS_SET $KITLIST_TABLE_EX(~%class%~) BEGIN
				SPRINT class $KITLIST_TABLE_EX(~%class%~)
				PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
					SET done = 1
				END
			END
		END
		PATCH_IF done BEGIN
			READ_2DA_ENTRY i 1 7 data_1
			READ_2DA_ENTRY i 2 7 data_2
			READ_2DA_ENTRY i 3 7 data_3
			READ_2DA_ENTRY i 4 7 data_4
			READ_2DA_ENTRY i 5 7 data_5
			READ_2DA_ENTRY i 6 7 data_6
			SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
			SPRINT data_restrict ~%data_restrict%%LNL%%TAB%%TAB%abilrestrict = { str=%data_1%, dex=%data_2%, con=%data_3%, int=%data_4%, wis=%data_5%, cha=%data_6% },~
			SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
		END
	END
	BUT_ONLY_IF_IT_CHANGES
COPY_EXISTING ~MGSRCREQ.2da~ ~override~
	COUNT_2DA_ROWS 9 rws
	FOR ( i = 0 ; i < rws ; ++i ) BEGIN
		READ_2DA_ENTRY i 1 9 class
		SET done = 0
		PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
			SET done = 1
		END
		PATCH_IF NOT done BEGIN
			PATCH_IF VARIABLE_IS_SET $KITLIST_TABLE_EX(~%class%~) BEGIN
				SPRINT class $KITLIST_TABLE_EX(~%class%~)
				PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
					SET done = 1
				END
			END
		END
		PATCH_IF done BEGIN
			READ_2DA_ENTRY i 2 9 data_1
			READ_2DA_ENTRY i 3 9 data_2
			READ_2DA_ENTRY i 4 9 data_3
			READ_2DA_ENTRY i 5 9 data_4
			READ_2DA_ENTRY i 6 9 data_5
			READ_2DA_ENTRY i 7 9 data_6
			READ_2DA_ENTRY i 8 9 data_7
			SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
			SPRINT data_restrict ~%data_restrict%%LNL%%TAB%%TAB%magescoolrestrict = { ['HUMAN']=%data_1%, ['ELF']=%data_2%, ['HALF_ELF']=%data_3%, ['DWARF']=%data_4%, ['HALFLING']=%data_5%, ['GNOME']=%data_6%, ['HALFORC']=%data_7% },~
			SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
		END
	END
	BUT_ONLY_IF_IT_CHANGES
COPY_EXISTING ~ALIGNMNT.2da~ ~override~
	COUNT_2DA_ROWS 10 rws
	FOR ( i = 0 ; i < rws ; ++i ) BEGIN
		READ_2DA_ENTRY i 0 10 class
		SET done = 0
		PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
			SET done = 1
		END
		PATCH_IF NOT done BEGIN
			PATCH_IF VARIABLE_IS_SET $KITLIST_TABLE_EX(~%class%~) BEGIN
				SPRINT class $KITLIST_TABLE_EX(~%class%~)
				PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
					SET done = 1
				END
			END
		END
		PATCH_IF done BEGIN
			READ_2DA_ENTRY i 1 10 data_1
			READ_2DA_ENTRY i 2 10 data_2
			READ_2DA_ENTRY i 3 10 data_3
			READ_2DA_ENTRY i 4 10 data_4
			READ_2DA_ENTRY i 5 10 data_5
			READ_2DA_ENTRY i 6 10 data_6
			READ_2DA_ENTRY i 7 10 data_7
			READ_2DA_ENTRY i 8 10 data_8
			READ_2DA_ENTRY i 9 10 data_9
			SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
			SPRINT data_restrict ~%data_restrict%%LNL%%TAB%%TAB%alignrestrict = { ['LAWFUL_GOOD']=%data_1%, ['LAWFUL_NEUTRAL']=%data_2%, ['LAWFUL_EVIL']=%data_3%, ['NEUTRAL_GOOD']=%data_4%, ['NEUTRAL']=%data_5%, ['NEUTRAL_EVIL']=%data_6%, ['CHAOTIC_GOOD']=%data_7%, ['CHAOTIC_NEUTRAL']=%data_8%, ['CHAOTIC_EVIL']=%data_9% },~
			SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
		END
	END
	BUT_ONLY_IF_IT_CHANGES
ACTION_PHP_EACH CLASDATA_TABLES AS class => data_restrict BEGIN
	OUTER_SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
	OUTER_SPRINT ~data_restrict~ ~%data_restrict%%LNL%%TAB%%TAB%minimumstats = { ~
	OUTER_SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
END
COPY_EXISTING ~ABCLASRQ.2DA~ ~override~
	COUNT_2DA_ROWS 7 rws
	FOR ( i = 0 ; i < rws ; ++i ) BEGIN
		READ_2DA_ENTRY i 0 7 class
		SET done = 0
		PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
			SET done = 1
		END
		PATCH_IF NOT done BEGIN
			PATCH_IF VARIABLE_IS_SET $KITLIST_TABLE_EX(~%class%~) BEGIN
				SPRINT class $KITLIST_TABLE_EX(~%class%~)
				PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
					SET done = 1
				END
			END
		END
		PATCH_IF done BEGIN
			READ_2DA_ENTRY i 1 7 data_1
			READ_2DA_ENTRY i 2 7 data_2
			READ_2DA_ENTRY i 3 7 data_3
			READ_2DA_ENTRY i 4 7 data_4
			READ_2DA_ENTRY i 5 7 data_5
			READ_2DA_ENTRY i 6 7 data_6
			SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
			SPRINT data_restrict ~%data_restrict%minstats = { str=%data_1%, dex=%data_2%, con=%data_3%, int=%data_4%, wis=%data_5%, cha=%data_6% },~
			SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
		END
	END
	BUT_ONLY_IF_IT_CHANGES
COPY_EXISTING ~ABCLSMOD.2DA~ ~override~
	COUNT_2DA_ROWS 7 rws
	FOR ( i = 0 ; i < rws ; ++i ) BEGIN
		READ_2DA_ENTRY i 0 7 class
		SET done = 0
		PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
			SET done = 1
		END
		PATCH_IF NOT done BEGIN
			PATCH_IF VARIABLE_IS_SET $KITLIST_TABLE_EX(~%class%~) BEGIN
				SPRINT class $KITLIST_TABLE_EX(~%class%~)
				PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
					SET done = 1
				END
			END
		END
		PATCH_IF done BEGIN
			READ_2DA_ENTRY i 1 7 data_1
			READ_2DA_ENTRY i 2 7 data_2
			READ_2DA_ENTRY i 3 7 data_3
			READ_2DA_ENTRY i 4 7 data_4
			READ_2DA_ENTRY i 5 7 data_5
			READ_2DA_ENTRY i 6 7 data_6
			SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
			SPRINT data_restrict ~%data_restrict% statmod = { str=%data_1%, dex=%data_2%, con=%data_3%, int=%data_4%, wis=%data_5%, cha=%data_6% }~
			SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
		END
	END
	BUT_ONLY_IF_IT_CHANGES
ACTION_PHP_EACH CLASDATA_TABLES AS class => data_restrict BEGIN
	OUTER_SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
	OUTER_SPRINT ~data_restrict~ ~%data_restrict% },~
	OUTER_SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
END
//COPY_EXISTING ~WEAPPROF.2da~ ~override/WEAPPROF_bak.2da~
COPY_EXISTING ~WEAPPROF.2da~ ~%MOD_FOLDER%/WEAPPROF.2da~
COPY_EXISTING ~WEAPPROF.2da~ ~override~
	REPLACE_TEXTUALLY ~NAME_REF~ ~XXXXXXX	NAME_REF~
COPY_EXISTING ~WEAPPROF.2da~ ~override~
	COUNT_2DA_COLS cols
	COUNT_2DA_ROWS cols rows
	FOR ( i = 4 ; i < cols ; ++i ) BEGIN
		SPRINT weapprof_str ~ ~
		READ_2DA_ENTRY 0 i cols class
		SET done = 0
		PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
			SET done = 1
		END
		PATCH_IF NOT done BEGIN
			PATCH_IF VARIABLE_IS_SET $KITLIST_TABLE_EX(~%class%~) BEGIN
				SPRINT class $KITLIST_TABLE_EX(~%class%~)
				PATCH_IF VARIABLE_IS_SET $CLASDATA_TABLES(~%class%~) BEGIN
					SET done = 1
				END
			END
		END
		PATCH_IF done BEGIN
			SPRINT MAGE_race_restrict ~ ~
			FOR ( j = 1 ; j < rows ; ++j ) BEGIN
				READ_2DA_ENTRY j 1 cols id
				PATCH_IF ( IS_AN_INT id ) AND ( id >= 89 ) AND ( id <= 115 ) BEGIN
					READ_2DA_ENTRY j i cols star
					//SET_2DA_ENTRY  j i cols 7
					PATCH_IF j = rows - 1 BEGIN SPRINT zpt ~~ END ELSE BEGIN SPRINT zpt ~,~ END
					SPRINT weapprof_str ~%weapprof_str%['%id%']=%star%%zpt% ~
					PATCH_IF ( ~%class%~ STR_EQ ~MAGE~ ) BEGIN
						SPRINT MAGE_race_restrict ~%MAGE_race_restrict%['%id%']=%star%%zpt% ~
					END
				END
			END
			SPRINT data_restrict $CLASDATA_TABLES(~%class%~)
			SPRINT data_restrict ~%data_restrict%%LNL%%TAB%%TAB%weapprof = {%weapprof_str%}~
			SPRINT $CLASDATA_TABLES(~%class%~) ~%data_restrict%~
		END
	END
COPY_EXISTING ~WEAPPROF.2da~ ~override~
	REPLACE_TEXTUALLY ~XXXXXXX	NAME_REF~ ~NAME_REF~
	PRETTY_PRINT_2DA
OUTER_SPRINT ~class_dual_2da~ ~zZcheckKit = {~
ACTION_PHP_EACH CLASDATA_TABLES AS class => data BEGIN
	OUTER_SPRINT ~class_dual_2da~ ~%class_dual_2da%%LNL%%TAB%['%class%'] = %data%%LNL%%TAB%},~
END
OUTER_SPRINT ~class_dual_2da~ ~%class_dual_2da%%LNL%}~
ACTION_PHP_EACH CLASTEXT_ARRAY AS data => value BEGIN
	OUTER_SPRINT ~clastext_2da~ ~%clastext_2da%%LNL%table.insert(clastxtList, {%data%, %data_1%, %data_2%, %data_3%, %data_4%, %data_5%, "%value%"})~
END
ACTION_CLEAR_ARRAY CLASTEXT_ARRAY
ACTION_CLEAR_ARRAY CLASTEXT_ARRAY_CHECK
ACTION_CLEAR_ARRAY KIT_EXISTS

/* RACETEXT */
<<<<<<<< ffff.2da
2DA                  V1.0
-1
	ID	NAME	DESCSTR	UPPERCASE	BIOGRAPHY
>>>>>>>>
COPY ~ffff.2da~ ~%MOD_FOLDER%/RACETEXT.2da~
OUTER_SPRINT ~racetext_2da~ ~racetextList = {}~
ACTION_PHP_EACH RACE_TXT AS file => dummy BEGIN
	ACTION_IF FILE_EXISTS_IN_GAME ~%file%.2da~ BEGIN
		COPY_EXISTING ~%file%.2da~ ~override~
			PRETTY_PRINT_2DA
			READ_2DA_ENTRIES_NOW racetext_tbl 6
			FOR (i=0; i < racetext_tbl; ++i) BEGIN
				READ_2DA_ENTRY_FORMER racetext_tbl i 0 race
				READ_2DA_ENTRY_FORMER racetext_tbl i 1 raceid
				READ_2DA_ENTRY_FORMER racetext_tbl i 2 racename
				READ_2DA_ENTRY_FORMER racetext_tbl i 3 racedesc
				READ_2DA_ENTRY_FORMER racetext_tbl i 4 upper
				READ_2DA_ENTRY_FORMER racetext_tbl i 5 bio
				PATCH_PHP_EACH race_desc AS racenametbl => desc BEGIN
					PATCH_IF ( ~%racenametbl%~ STR_EQ ~%race%~ ) BEGIN
						PATCH_IF ( racedesc = minus ) BEGIN
							SET racedesc = desc
						END
					END
				END
				PATCH_IF ( NOT VARIABLE_IS_SET $CLASTEXT_ARRAY_CHECK(~RACE%racename%~) OR
				           NOT VARIABLE_IS_SET $CLASTEXT_ARRAY_CHECK(~RACE%upper%~) ) BEGIN
					PATCH_IF NOT VARIABLE_IS_SET $CLASTEXT_ARRAY_CHECK(~RACE%racename%~) BEGIN
						DEFINE_ASSOCIATIVE_ARRAY CLASTEXT_ARRAY_CHECK BEGIN ~RACE%racename%~ => _ END
					END
					PATCH_IF NOT VARIABLE_IS_SET $CLASTEXT_ARRAY_CHECK(~RACE%upper%~) BEGIN
						DEFINE_ASSOCIATIVE_ARRAY CLASTEXT_ARRAY_CHECK BEGIN ~RACE%upper%~ => _ END
					END
					DEFINE_ASSOCIATIVE_ARRAY CLASTEXT_ARRAY BEGIN
						~%raceid%~, ~%racename%~, ~%racedesc%~, ~%upper%~, ~%bio%~ => ~%race%~
					END
				END
				INNER_ACTION BEGIN
					COPY ~%MOD_FOLDER%/RACETEXT.2da~ ~%MOD_FOLDER%/RACETEXT.2da~
						COUNT_2DA_ROWS 6 rw
						INSERT_2DA_ROW rw 6 ~%race%	%raceid%	%racename%	%racedesc%	%upper%	%bio%~
						PRETTY_PRINT_2DA
				END
			END
			PRETTY_PRINT_2DA
		BUT_ONLY
	END
END
ACTION_PHP_EACH CLASTEXT_ARRAY AS data => value BEGIN
	OUTER_SPRINT ~racetext_2da~ ~%racetext_2da%%LNL%table.insert(racetextList, {%data%, %data_1%, %data_2%, %data_3%, %data_4%, "%value%"})~
END
ACTION_CLEAR_ARRAY CLASTEXT_ARRAY
ACTION_CLEAR_ARRAY CLASTEXT_ARRAY_CHECK

/* months */
OUTER_SPRINT ~months_2da~ ~zzMonths = {}~
COPY_EXISTING ~months.2da~ ~override~
	COUNT_2DA_ROWS 3 rows
	FOR ( i = 0 ; i < rows ; ++i ) BEGIN
		SET num = i + 1
		READ_2DA_ENTRY i 1 3 days
		READ_2DA_ENTRY i 2 3 month
		SPRINT ~months_2da~ ~%months_2da%%LNL%table.insert(zzMonths, {%num%, %days%, %month%})~
	END
	BUT_ONLY_IF_IT_CHANGES

/* reputation donat */
OUTER_SPRINT ~reputatidonat_2da~ ~zZdonateTbl = {~
OUTER_SET reputdone = 0
ACTION_PHP_EACH REPU_TXT AS file => ~~ BEGIN
	ACTION_IF ( FILE_EXISTS_IN_GAME ~%file%.2da~ ) AND ( NOT reputdone ) BEGIN
		COPY_EXISTING ~%file%.2DA~ ~override~
	COUNT_2DA_ROWS 10 rows
	SPRINT reputatis ~~
	FOR ( i = 0 ; i < rows ; ++i ) BEGIN
		READ_2DA_ENTRY i 0 10 rep
		READ_2DA_ENTRY i 9 10 val
				PATCH_IF ( IS_AN_INT val ) BEGIN
		PATCH_IF ( val = 0 ) BEGIN SPRINT val ~----~ END
		SPRINT reputatis ~%LNL%%TAB%{ %rep%, '%val%' },%reputatis%~
	END
			END
	SPRINT ~reputatidonat_2da~ ~%reputatidonat_2da%%reputatis%%LNL%}~
	BUT_ONLY
		OUTER_SET reputdone = 1
	END
END
ACTION_IF ( NOT reputdone ) BEGIN
	OUTER_SPRINT ~reputatidonat_2da~ ~%reputatidonat_2da%
	{ 20, '----' },
	{ 19, '----' },
	{ 18, '----' },
	{ 17, '5000' },
	{ 16, '2500' },
	{ 15, '2000' },
	{ 14, '1500' },
	{ 13, '1000' },
	{ 12, '800' },
	{ 11, '500' },
	{ 10, '300' },
	{ 9, '200' },
	{ 8, '100' },
	{ 7, '150' },
	{ 6, '300' },
	{ 5, '500' },
	{ 4, '600' },
	{ 3, '1000' },
	{ 2, '1200' },
	{ 1, '1500' },
}~
END
//OUTER_SPRINT ~reputatidonat_2da~ ~%reputatidonat_2da%%LNL%}~

/* epilogue portrait and cre data */
COPY ~%MOD_FOLDER%/CLASTEXT.2da~ ~%MOD_FOLDER%/CLASTEXT.2da~
	REPLACE_TEXTUALLY ~2147483648~ ~9999998~
	REPLACE_TEXTUALLY ~1073741824~ ~9999994~
	BUT_ONLY_IF_IT_CHANGES

LAM JOINABLE_NPC_ARRAYS

ACTION_CLEAR_ARRAY EPILOGUE_ARRAY
ACTION_CLEAR_ARRAY NPC_DATA_ARRAY

COPY_EXISTING ~HATERACE.2DA~ ~override~
	READ_2DA_ENTRIES_NOW hated_race_tbl 4
	BUT_ONLY_IF_IT_CHANGES

COPY_EXISTING ~enginest.2DA~ ~override~
	READ_2DA_ENTRIES_NOW enginest_tbl 2
	BUT_ONLY_IF_IT_CHANGES

COPY ~%MOD_FOLDER%/CLASTEXT.2da~ ~%MOD_FOLDER%/CLASTEXT.2da~
	READ_2DA_ENTRIES_NOW class_tbl 6
	BUT_ONLY_IF_IT_CHANGES

COPY ~%MOD_FOLDER%/RACETEXT.2da~ ~%MOD_FOLDER%/RACETEXT.2da~
	READ_2DA_ENTRIES_NOW race_tbl 6
	BUT_ONLY_IF_IT_CHANGES

ACTION_PHP_EACH JOINABLE_NPC_ARRAY AS file => dv BEGIN
	ACTION_IF FILE_EXISTS_IN_GAME ~%file%.cre~ BEGIN
		COPY_EXISTING ~%file%.cre~ ~override~
			READ_LONG 0x1cc bio
			READ_ASCII 0x3c lport (8) NULL
			TO_UPPER lport
			PATCH_IF ( ~%lport%~ STR_CMP ~~ ) AND
			         ( ~%lport%~ STR_CMP ~NONE~ ) AND
			         ( ~%SOURCE_RES%~ STR_CMP ~IMOEN~ ) AND
			         ( ~%SOURCE_RES%~ STR_CMP ~BDCAELA2~ ) AND
			         ( ~%SOURCE_RES%~ STR_CMP ~QUAYLE~ ) AND
			         ( bio >= 0 ) BEGIN
				READ_LONG 0x08 name
				SET len = STRING_LENGTH ~%lport%~ - 1
				SNPRINT len port ~%lport%~
				PATCH_IF ( name = 10896 ) AND ( ~%port%~ STR_EQ ~BRANWE~ ) BEGIN SET name = 9499 END
				PATCH_IF ( name = 210896 ) AND ( ~%port%~ STR_EQ ~BRANWE~ ) BEGIN SET name = 209499 END
				PATCH_IF NOT VARIABLE_IS_SET $EPILOGUE_ARRAY( ~%port%~ ) BEGIN
					DEFINE_ASSOCIATIVE_ARRAY EPILOGUE_ARRAY BEGIN ~%port%~ => ~%name%~ END
				END
				READ_LONG 0x1cc bio
				READ_BYTE 0x238 stra
				READ_BYTE 0x239 strb
				READ_BYTE 0x23a int
				READ_BYTE 0x23b wis
				READ_BYTE 0x23c dex
				READ_BYTE 0x23d con
				READ_BYTE 0x23e chr
				READ_BYTE 0x241 rac_enemy
				READ_SHORT 0x244 kitu
				READ_SHORT 0x246 kit
				PATCH_IF kitu = 16384 BEGIN SET kit = 9999994 END
				PATCH_IF kitu = 32768 BEGIN SET kit = 9999998 END
				READ_BYTE 0x272 race
				PATCH_IF ( ~%port%~ STR_EQ ~BRANWE~ ) BEGIN SET race = 1 END
				READ_BYTE 0x273 class
				READ_BYTE 0x275 gender
				READ_BYTE 0x27b align
				READ_ASCII 0x280 dv (32) NULL
				INNER_ACTION BEGIN
					SILENT
						OUTER_SET hated_race = 0
						OUTER_SET done = 0
						OUTER_INNER_PATCH hated_race_tbl BEGIN
							FOR ( i = 0 ; i < hated_race_tbl ; ++i ) BEGIN
								READ_2DA_ENTRY_FORMER hated_race_tbl i 2 rac
								PATCH_IF rac = rac_enemy AND done = 0 BEGIN
									READ_2DA_ENTRY_FORMER hated_race_tbl i 1 hated_race
									SET done = 1
								END
							END
						END
						OUTER_SET race_idx = 0
						OUTER_SET done = 0
						OUTER_INNER_PATCH race_tbl BEGIN
							FOR ( i = 0 ; i < race_tbl ; ++i ) BEGIN
								READ_2DA_ENTRY_FORMER race_tbl i 1 rac
								PATCH_IF rac = race AND done = 0 BEGIN
									READ_2DA_ENTRY_FORMER race_tbl i 2 race_idx
									SET done = 1
								END
							END
						END
						OUTER_SET class_idx = 0
						OUTER_SET kit_idx = 0
						OUTER_SET done = 0
						OUTER_SET donekit = 0
						OUTER_SPRINT kit_name ~~
						OUTER_SPRINT class_name ~~
						ACTION_IF kit != 0 AND kit != 64 AND kit != 128 AND kit != 256 AND kit != 512 AND kit != 1024 AND kit != 2048 AND kit != 4096 AND kit != 8192 AND kit != 9999994 AND kit != 9999998 AND kit != 16384 BEGIN
							OUTER_SET kit = kit - 16384
						END
						OUTER_INNER_PATCH class_tbl BEGIN
							FOR ( i = 0 ; i < class_tbl ; ++i ) BEGIN
								READ_2DA_ENTRY_FORMER class_tbl i 1 rac
								READ_2DA_ENTRY_FORMER class_tbl i 2 kt
								PATCH_IF IS_AN_INT kt AND rac = class AND kt = 16384 AND done = 0 BEGIN
									READ_2DA_ENTRY_FORMER class_tbl i 3 class_idx
									READ_2DA_ENTRY_FORMER class_tbl i 0 class_name
									SET done = 1
								END
								PATCH_IF kit != 0 AND kit != 16384 BEGIN
									PATCH_IF IS_AN_INT kt AND kt = kit BEGIN
										READ_2DA_ENTRY_FORMER class_tbl i 3 ktu
										PATCH_IF ~%ktu%~ != "-1" AND donekit = 0 BEGIN
											READ_2DA_ENTRY_FORMER class_tbl i 3 kit_idx
											READ_2DA_ENTRY_FORMER class_tbl i 0 kit_name
											SET donekit = 1
										END
									END
								END
							END
						END
						OUTER_SET gnd_male = 0
						OUTER_SET gnd_faml = 0
						OUTER_SET law_good = 0
						OUTER_SET law_neut = 0
						OUTER_SET law_evil = 0
						OUTER_SET neu_good = 0
						OUTER_SET neu_neut = 0
						OUTER_SET neu_evil = 0
						OUTER_SET cha_good = 0
						OUTER_SET cha_neut = 0
						OUTER_SET cha_evil = 0
						OUTER_INNER_PATCH enginest_tbl BEGIN
							FOR ( i = 0 ; i < enginest_tbl ; ++i ) BEGIN
								READ_2DA_ENTRY_FORMER enginest_tbl i 0 rw
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_MALE~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 gnd_male
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_FEMALE~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 gnd_faml
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_LAWFUL_GOOD~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 law_good
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_LAWFUL_NEUTRAL~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 law_neut
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_LAWFUL_EVIL~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 law_evil
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_NEUTRAL_GOOD~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 neu_good
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_TRUE_NEUTRAL~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 neu_neut
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_NEUTRAL_EVIL~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 neu_evil
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_CHAOTIC_GOOD~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 cha_good
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_CHAOTIC_NEUTRAL~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 cha_neut
								END
								PATCH_IF ( ~%rw%~ STR_EQ ~STRREF_GUI_LOWER_CHAOTIC_EVIL~ ) BEGIN
									READ_2DA_ENTRY_FORMER enginest_tbl i 1 cha_evil
								END
							END
						END
						ACTION_MATCH gender WITH
							1 BEGIN OUTER_SET gender_idx = gnd_male END
							2 BEGIN OUTER_SET gender_idx = gnd_faml END
						DEFAULT
							OUTER_SET gender_idx = 0
						END
						ACTION_MATCH align WITH
							17 BEGIN OUTER_SET align_idx = law_good END
							18 BEGIN OUTER_SET align_idx = law_neut END
							19 BEGIN OUTER_SET align_idx = law_evil END
							33 BEGIN OUTER_SET align_idx = neu_good END
							34 BEGIN OUTER_SET align_idx = neu_neut END
							35 BEGIN OUTER_SET align_idx = neu_evil END
							49 BEGIN OUTER_SET align_idx = cha_good END
							50 BEGIN OUTER_SET align_idx = cha_neut END
							51 BEGIN OUTER_SET align_idx = cha_evil END
						DEFAULT
							OUTER_SET align_idx = 0
						END
					VERBOSE
				END
				SPRINT strav ~{ name=%name%, bio=%bio%, racialEnemy=%hated_race%, kit=%kit_idx%, kitName='%kit_name%', race=%race_idx%, class=%class_idx%, classId=%class%, className='%class_name%', gender=%gender_idx%, alignment=%align_idx%, portrait='%lport%', STR=%stra%, STTREXTRA=%strb%, INT=%int%, WIS=%wis%, DEX=%dex%, CON=%con%, CHR=%chr%, scriptName='%dv%' }~
				PATCH_IF !VARIABLE_IS_SET $NPC_DATA_ARRAY(~%port%~) BEGIN
					DEFINE_ASSOCIATIVE_ARRAY NPC_DATA_ARRAY BEGIN ~%port%~ => ~%strav%~ END
				END
			END
			BUT_ONLY_IF_IT_CHANGES
	END
END

OUTER_SPRINT ~epilogue_text~ ~~
ACTION_PHP_EACH EPILOGUE_ARRAY AS port => name BEGIN
	OUTER_SPRINT ~epilogue_text~ ~%epilogue_text%%LNL%%TAB%['%port%'] = %name%,~
END

OUTER_SPRINT ~npc_data_text~ ~~
ACTION_PHP_EACH NPC_DATA_ARRAY AS port => name BEGIN
	OUTER_SPRINT ~npc_data_text~ ~%npc_data_text%%LNL%%TAB%%name%,~
END

ACTION_CLEAR_ARRAY EPILOGUE_ARRAY
ACTION_CLEAR_ARRAY NPC_DATA_ARRAY

/* items */ //type
OUTER_SPRINT ~text_lua_items~ ~~
COPY_EXISTING_REGEXP GLOB ~^.*\.itm~ ~override~
	READ_BYTE 0x18 flags
	SET drop = 0
	LPF GET_BIT INT_VAR number = flags nth_bit = 2 RET drop = bit_value END
	LPF GET_BIT INT_VAR number = flags nth_bit = 0 RET critical_bit = bit_value END
	READ_SHORT 0x1c item_type
	READ_ASCII 0x3a icon (8)
	READ_ASCII 0x58 desc_icon (8)
	SPRINT type "Misc"
	PATCH_IF /*(drop) AND*/ (~%icon%~ STR_CMP ~NONE~) AND (~%icon%~ STR_CMP ~~) BEGIN
		PATCH_MATCH item_type WITH
			1  BEGIN SPRINT type ~Amulet~ END
			2  BEGIN SPRINT type ~Armor~ END
			3  BEGIN SPRINT type ~Belt~ END
			4  BEGIN SPRINT type ~Boot~ END
			5  BEGIN SPRINT type ~Arrow~ END
			6  BEGIN SPRINT type ~Bracers~ END
			7  BEGIN SPRINT type ~Helmet~ END
			8  BEGIN SPRINT type ~Key~ END
			9  BEGIN SPRINT type ~Potion~ END
			10 BEGIN SPRINT type ~Ring~ END
			11 BEGIN SPRINT type ~Scroll~ END
			12 BEGIN SPRINT type ~Shield~ END
			14 BEGIN SPRINT type ~Bullet~ END
			15 BEGIN SPRINT type ~Bow~ END
			16 BEGIN SPRINT type ~Dagger~ END
			17 BEGIN SPRINT type ~Mace~ END
			18 BEGIN SPRINT type ~Sling~ END
			19 BEGIN SPRINT type ~SmallSword~ END
			20 BEGIN SPRINT type ~LargeSword~ END
			21 BEGIN SPRINT type ~Hammer~ END
			22 BEGIN SPRINT type ~Morningstar~ END
			23 BEGIN SPRINT type ~Flail~ END
			24 BEGIN SPRINT type ~Dart~ END
			25 BEGIN SPRINT type ~Axe~ END
			26 BEGIN SPRINT type ~Staff~ END
			27 BEGIN SPRINT type ~Crossbow~ END
			29 BEGIN SPRINT type ~Spear~ END
			30 BEGIN SPRINT type ~Halberd~ END
			31 BEGIN SPRINT type ~Bolt~ END
			32 BEGIN SPRINT type ~Cloack~ END
			34 BEGIN SPRINT type ~Gem~ END
			35 BEGIN SPRINT type ~Wand~ END
			36 BEGIN SPRINT type ~Bag~ END
			37 BEGIN SPRINT type ~Book~ END
		DEFAULT
			SPRINT type ~Misc~
		END
		READ_LONG  0x0034 price
		READ_LONG  0x004c weight
		READ_LONG  0x0060 enchantment
		READ_SHORT 0x0042 lore
		SET loot_ammo = 0
		PATCH_IF ( item_type =  5 ) OR //Arrow
		         ( item_type = 14 ) OR //Bullet
		         ( item_type = 24 ) OR //Dart
		         ( item_type = 31 ) BEGIN //Bolt
			PATCH_IF ( ~%SOURCE_RES%~ STR_CMP ~AROW01~ ) AND
			         ( ~%SOURCE_RES%~ STR_CMP ~BOLT01~ ) AND
			         ( ~%SOURCE_RES%~ STR_CMP ~BULL01~ ) AND
			         ( ~%SOURCE_RES%~ STR_CMP ~DART01~ ) AND
			         ( ~%SOURCE_RES%~ STR_CMP ~IDART01~ ) BEGIN
				loot_ammo = 1
			END
		END
		/*SET bag_capacity = 0
		PATCH_IF item_type = 36 BEGIN
			INNER_ACTION BEGIN
				ACTION_IF FILE_EXISTS_IN_GAME ~%SOURCE_RES%.sto~ BEGIN
					COPY_EXISTING ~%SOURCE_RES%.sto~ ~override~
						READ_SHORT 0x0022 bag_capacity
						BUT_ONLY_IF_IT_CHANGES
				END
			END
		END*/
		PATCH_IF (drop) OR ((NOT drop) AND (~%desc_icon%~ STR_CMP ~NONE~) AND (~%desc_icon%~ STR_CMP ~~)) BEGIN
			SPRINT ~text_lua_items~ ~%text_lua_items%%LNL%%TAB%['%SOURCE_RES%'] = {['itemtype'] = '%type%', ['critical'] = %critical_bit%, ['price'] = %price%, ['weight'] = %weight%, ['enchantment'] = %enchantment%, ['lore'] = %lore%, ['loot_ammo'] = %loot_ammo%},~ //, ['capacity'] = %bag_capacity%
		END
	END
	BUT_ONLY_IF_IT_CHANGES

/* dual_prof */
OUTER_SPRINT ~text_dual_profs~ ~~
OUTER_SPRINT ~text_chargen_profs_tables~ ~~
COPY_EXISTING ~weapprof.2da~ ~override~
	READ_2DA_ENTRIES_NOW weapprof_arr 4
	FOR ( i = 89 ; i < 116 ; ++i ) BEGIN
		SET value = 0
		FOR ( j = 0 ; j < weapprof_arr ; ++j ) BEGIN
			READ_2DA_ENTRY_FORMER weapprof_arr j 1 prof
			PATCH_IF ( IS_AN_INT prof ) AND ( prof = i ) BEGIN
				READ_2DA_ENTRY_FORMER weapprof_arr j 2 value
				SET j = weapprof_arr
			END
		END
		PATCH_IF value = 0 BEGIN
			PATCH_IF ((i = 108) OR (i = 109) OR (i = 110)) AND GAME_IS ~bg2ee eet~ BEGIN
				SET value = 31024 + i
			END ELSE BEGIN
				SET value = (0 - 1)
			END
		END
		SPRINT ~text_dual_profs~ ~%text_dual_profs%%LNL%%TAB%['%i%'] = %value%,~
	END
	FOR ( i = 0 ; i < weapprof_arr ; ++i ) BEGIN
		READ_2DA_ENTRY_FORMER weapprof_arr i 1 prof
		PATCH_IF ( IS_AN_INT prof ) AND ( prof >= 89 ) AND ( prof <= 115 ) BEGIN
			READ_2DA_ENTRY_FORMER weapprof_arr i 2 value
			READ_2DA_ENTRY_FORMER weapprof_arr i 3 desc
			READ_2DA_ENTRY_FORMER weapprof_arr i 0 title
			SPRINT ~text_chargen_profs_tables~ ~%text_chargen_profs_tables%%LNL%%TAB%{id=%prof%, name=%value%, desc=%desc%, currchar=nil, char=nil, title='%title%'},~
		END
	END
	BUT_ONLY_IF_IT_CHANGES


COPY_EXISTING ~m_zZatbl.lua~ ~override~
	REPLACE_TEXTUALLY ~all_class_xp_tables~  ~%xplevel_2da%~
	REPLACE_TEXTUALLY ~all_class_dual_data_table~ ~%class_dual_2da%~
	REPLACE_TEXTUALLY ~all_class_data_table~ ~%clastext_2da%~
	REPLACE_TEXTUALLY ~all_class_race_table~ ~%racetext_2da%~
	REPLACE_TEXTUALLY ~all_month_in_year_table~ ~%months_2da%~
	REPLACE_TEXTUALLY ~all_reputation_donate_tabl~ ~%reputatidonat_2da%~
	REPLACE_TEXTUALLY ~creature_epilogue_portraits~ ~%epilogue_text%~
	REPLACE_TEXTUALLY ~npc_list_all_listlist~ ~%npc_data_text%~
	REPLACE_TEXTUALLY ~item_list_table~ ~%text_lua_items%~
	REPLACE_TEXTUALLY ~dual_profs_tables~ ~%text_dual_profs%~
	REPLACE_TEXTUALLY ~dual_chargen_profs_tables~ ~%text_chargen_profs_tables%~
	REPLACE_TEXTUALLY ~str_bonus_2da_table~ ~%str_bonus_2da%~


/* dual_spels */
OUTER_SET $FC_CLAB(~CLABMA01~) = 1
OUTER_SET $FC_SPELLS(~kit0x80000000~) = 0x80000000
COPY_EXISTING ~KITLIST.2DA~ ~override~
	COUNT_2DA_ROWS 10 rows
	PATCH_IF ( rows > 0 ) BEGIN
		FOR ( i = 0 ; i < rows ; ++i ) BEGIN
			READ_2DA_ENTRY i 8 10 type
			PATCH_IF ( IS_AN_INT type ) AND ( type = 1 ) BEGIN
				READ_2DA_ENTRY i 5 10 value
				READ_2DA_ENTRY i 9 10 kit
				PATCH_IF NOT VARIABLE_IS_SET $FC_CLAB(~%value%~) BEGIN
					SET $FC_CLAB(~%value%~) = 1
				END
				PATCH_IF NOT VARIABLE_IS_SET $FC_CLAB(~kit%kit%~) BEGIN
					SET $FC_SPELLS(~kit%kit%~) = kit
				END
			END
		END
	END
	BUT_ONLY_IF_IT_CHANGES

ACTION_PHP_EACH FC_CLAB AS name => value BEGIN
	ACTION_IF value BEGIN
		LAF FC_ADD_CLAB_DATA STR_VAR file = EVAL "%name%" label = "DUALSPELL" abil = "FCDCSPLM" RET done END
		ACTION_IF done BEGIN COPY_EXISTING ~%name%.2da~ ~override~ PRETTY_PRINT_2DA END
	END
END

/*LAF ADD_SPLPROT_ENTRY
	INT_VAR stat_hex = 0
	STR_VAR label = ~LEVEL1EQVAL~ definition = ~34 -1 1~
	RET LEVEL1EQVAL=index exists label1
END
LAF ADD_SPLPROT_ENTRY
	INT_VAR stat_hex = 0
	STR_VAR label = ~LEVEL1GTVAL~ definition = ~34 -1 3~
	RET LEVEL1GTVAL=index exists label1
END
LAF ADD_SPLPROT_ENTRY
	INT_VAR stat_hex = 0
	STR_VAR label = ~LEVEL2EQVAL~ definition = ~68 -1 1~
	RET LEVEL2EQVAL=index exists label1
END
LAF ADD_SPLPROT_ENTRY
	INT_VAR stat_hex = 0
	STR_VAR label = ~LEVEL2GTVAL~ definition = ~68 -1 3~
	RET LEVEL2GTVAL=index exists label1
END*/
LAF ADD_SPLPROT_ENTRY
	INT_VAR stat_hex = 0
	STR_VAR label = ~LEVEL1LTVAL~ definition = ~34 -1 2~
	RET LEVEL1LTVAL=index exists label1
END
LAF ADD_SPLPROT_ENTRY
	INT_VAR stat_hex = 0
	STR_VAR label = ~LEVEL2LTVAL~ definition = ~68 -1 2~
	RET LEVEL2LTVAL=index exists label1
END

CREATE SPL ~FCDCSPLM~
	WRITE_LONG   0x18 50380800
	WRITE_SHORT  0x1c 4      // Spell type = innate
	WRITE_LONG   0x34 1      // Spell level
	WRITE_LONG   0x64 0x72   // abilities offset
	WRITE_SHORT  0x68 1      // # abilities
	WRITE_LONG   0x6a 0x9a   // effects offset
	INSERT_BYTES 0x72 0x28   // space for ability
	// creating ability structure
	WRITE_SHORT  0x72 1      // type = melee
	WRITE_SHORT  0x74 4      // location = innate
	WRITE_BYTE   0x7e 5      // target = caster
	WRITE_SHORT  0x80 1      // range
	WRITE_SHORT  0x82 1      // min. level
	WRITE_SHORT  0x84 1      // casting speed
	WRITE_SHORT  0x8e 1      // damage type
	WRITE_SHORT  0x94 1      // # charges
	WRITE_SHORT  0x98 1      // projectile = none
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 326
			target     = 1
			parameter1 = 7
			parameter2 = 105
			timing     = 1
		STR_VAR
			resource   = FCDCSPLF
	END
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 326
			target     = 1
			parameter1 = 14
			parameter2 = 105
			timing     = 1
		STR_VAR
			resource   = FCDCSPLF
	END
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 326
			target     = 1
			parameter1 = 13
			parameter2 = 105
			timing     = 1
		STR_VAR
			resource   = FCDCSPLT
	END

CREATE SPL ~FCDCSPLF~
	WRITE_LONG   0x18 50380800
	WRITE_SHORT  0x1c 4      // Spell type = innate
	WRITE_LONG   0x34 1      // Spell level
	WRITE_LONG   0x64 0x72   // abilities offset
	WRITE_SHORT  0x68 1      // # abilities
	WRITE_LONG   0x6a 0x9a   // effects offset
	INSERT_BYTES 0x72 0x28   // space for ability
	// creating ability structure
	WRITE_SHORT  0x72 1      // type = melee
	WRITE_SHORT  0x74 4      // location = innate
	WRITE_BYTE   0x7e 1      // target = caster
	WRITE_SHORT  0x80 1      // range
	WRITE_SHORT  0x82 1      // min. level
	WRITE_SHORT  0x84 1      // casting speed
	WRITE_SHORT  0x8e 1      // damage type
	WRITE_SHORT  0x94 1      // # charges
	WRITE_SHORT  0x98 1      // projectile = none
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 318
			target     = 1
			parameter1 = 2
			parameter2 = LEVEL1LTVAL
			duration   = 1
		STR_VAR
			resource   = FCDCSPLF
	END
	PATCH_PHP_EACH FC_SPELLS AS name => value BEGIN
		LPF ADD_SPELL_EFFECT
			INT_VAR
				opcode     = 177
				target     = 1
				parameter1 = value
				parameter2 = 9
				timing     = 1
			STR_VAR
				resource   = FCDCSPLW
		END
	END

CREATE SPL ~FCDCSPLT~
	WRITE_LONG   0x18 50380800
	WRITE_SHORT  0x1c 4      // Spell type = innate
	WRITE_LONG   0x34 1      // Spell level
	WRITE_LONG   0x64 0x72   // abilities offset
	WRITE_SHORT  0x68 1      // # abilities
	WRITE_LONG   0x6a 0x9a   // effects offset
	INSERT_BYTES 0x72 0x28   // space for ability
	// creating ability structure
	WRITE_SHORT  0x72 1      // type = melee
	WRITE_SHORT  0x74 4      // location = innate
	WRITE_BYTE   0x7e 1      // target = caster
	WRITE_SHORT  0x80 1      // range
	WRITE_SHORT  0x82 1      // min. level
	WRITE_SHORT  0x84 1      // casting speed
	WRITE_SHORT  0x8e 1      // damage type
	WRITE_SHORT  0x94 1      // # charges
	WRITE_SHORT  0x98 1      // projectile = none
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 318
			target     = 1
			parameter1 = 2
			parameter2 = LEVEL2LTVAL
			duration   = 1
		STR_VAR
			resource   = FCDCSPLT
	END
	PATCH_PHP_EACH FC_SPELLS AS name => value BEGIN
		LPF ADD_SPELL_EFFECT
			INT_VAR
				opcode     = 177
				target     = 1
				parameter1 = value
				parameter2 = 9
				timing     = 1
			STR_VAR
				resource   = FCDCSPLW
		END
	END

CREATE EFF ~FCDCSPLW~
	WRITE_LONG  0x10 326
	WRITE_LONG  0x24 1
	WRITE_SHORT 0x2c 100
	WRITE_ASCII 0x30 ~FCDCSPLW~ (8)

CREATE SPL ~FCDCSPLW~
	WRITE_LONG   0x18 50380800
	WRITE_SHORT  0x1c 4      // Spell type = innate
	WRITE_LONG   0x34 1      // Spell level
	WRITE_LONG   0x64 0x72   // abilities offset
	WRITE_SHORT  0x68 1      // # abilities
	WRITE_LONG   0x6a 0x9a   // effects offset
	INSERT_BYTES 0x72 0x28   // space for ability
	// creating ability structure
	WRITE_SHORT  0x72 1      // type = melee
	WRITE_SHORT  0x74 4      // location = innate
	WRITE_BYTE   0x7e 1      // target = living actor
	WRITE_SHORT  0x80 1      // range
	WRITE_SHORT  0x82 1      // min. level
	WRITE_SHORT  0x84 1      // casting speed
	WRITE_SHORT  0x8e 1      // damage type
	WRITE_SHORT  0x94 1      // # charges
	WRITE_SHORT  0x98 1      // projectile = none
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 42
			target     = 2
			parameter1 = 1
			parameter2 = 511
			timing     = 9
	END
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 206
			target     = 2
			parameter1 = 0 - 1
			timing     = 9
		STR_VAR
			resource  = FCDCSPLM
	END
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 206
			target     = 2
			parameter1 = 0 - 1
			timing     = 9
		STR_VAR
			resource  = FCDCSPLW
	END
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 206
			target     = 2
			parameter1 = 0 - 1
			timing     = 9
		STR_VAR
			resource  = FCDCSPLF
	END
	LPF ADD_SPELL_EFFECT
		INT_VAR
			opcode     = 206
			target     = 2
			parameter1 = 0 - 1
			timing     = 9
		STR_VAR
			resource  = FCDCSPLT
	END












